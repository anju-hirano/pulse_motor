
pulse_motor_f446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001210  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080013d4  080013d4  000113d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080013ec  080013ec  000113ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080013f4  080013f4  000113f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080013f8  080013f8  000113f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  080013fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000074  20000010  08001408  00020010  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  20000084  08001408  00020084  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00007c2a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000197e  00000000  00000000  00027c66  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002dd3  00000000  00000000  000295e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000005c0  00000000  00000000  0002c3b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000006b8  00000000  00000000  0002c978  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000033b4  00000000  00000000  0002d030  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002471  00000000  00000000  000303e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00032855  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000e5c  00000000  00000000  000328d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080013bc 	.word	0x080013bc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	080013bc 	.word	0x080013bc

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b97a 	b.w	8000510 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	468c      	mov	ip, r1
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	9e08      	ldr	r6, [sp, #32]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d151      	bne.n	80002e8 <__udivmoddi4+0xb4>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d96d      	bls.n	8000326 <__udivmoddi4+0xf2>
 800024a:	fab2 fe82 	clz	lr, r2
 800024e:	f1be 0f00 	cmp.w	lr, #0
 8000252:	d00b      	beq.n	800026c <__udivmoddi4+0x38>
 8000254:	f1ce 0c20 	rsb	ip, lr, #32
 8000258:	fa01 f50e 	lsl.w	r5, r1, lr
 800025c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000260:	fa02 f70e 	lsl.w	r7, r2, lr
 8000264:	ea4c 0c05 	orr.w	ip, ip, r5
 8000268:	fa00 f40e 	lsl.w	r4, r0, lr
 800026c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000270:	0c25      	lsrs	r5, r4, #16
 8000272:	fbbc f8fa 	udiv	r8, ip, sl
 8000276:	fa1f f987 	uxth.w	r9, r7
 800027a:	fb0a cc18 	mls	ip, sl, r8, ip
 800027e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000282:	fb08 f309 	mul.w	r3, r8, r9
 8000286:	42ab      	cmp	r3, r5
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x6c>
 800028a:	19ed      	adds	r5, r5, r7
 800028c:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000290:	f080 8123 	bcs.w	80004da <__udivmoddi4+0x2a6>
 8000294:	42ab      	cmp	r3, r5
 8000296:	f240 8120 	bls.w	80004da <__udivmoddi4+0x2a6>
 800029a:	f1a8 0802 	sub.w	r8, r8, #2
 800029e:	443d      	add	r5, r7
 80002a0:	1aed      	subs	r5, r5, r3
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb5 f0fa 	udiv	r0, r5, sl
 80002a8:	fb0a 5510 	mls	r5, sl, r0, r5
 80002ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b0:	fb00 f909 	mul.w	r9, r0, r9
 80002b4:	45a1      	cmp	r9, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x98>
 80002b8:	19e4      	adds	r4, r4, r7
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002be:	f080 810a 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80002c2:	45a1      	cmp	r9, r4
 80002c4:	f240 8107 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	eba4 0409 	sub.w	r4, r4, r9
 80002d0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d4:	2100      	movs	r1, #0
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d061      	beq.n	800039e <__udivmoddi4+0x16a>
 80002da:	fa24 f40e 	lsr.w	r4, r4, lr
 80002de:	2300      	movs	r3, #0
 80002e0:	6034      	str	r4, [r6, #0]
 80002e2:	6073      	str	r3, [r6, #4]
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xc8>
 80002ec:	2e00      	cmp	r6, #0
 80002ee:	d054      	beq.n	800039a <__udivmoddi4+0x166>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	f040 808e 	bne.w	8000422 <__udivmoddi4+0x1ee>
 8000306:	42ab      	cmp	r3, r5
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xdc>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2d0>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb65 0503 	sbc.w	r5, r5, r3
 8000316:	2001      	movs	r0, #1
 8000318:	46ac      	mov	ip, r5
 800031a:	2e00      	cmp	r6, #0
 800031c:	d03f      	beq.n	800039e <__udivmoddi4+0x16a>
 800031e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	b912      	cbnz	r2, 800032e <__udivmoddi4+0xfa>
 8000328:	2701      	movs	r7, #1
 800032a:	fbb7 f7f2 	udiv	r7, r7, r2
 800032e:	fab7 fe87 	clz	lr, r7
 8000332:	f1be 0f00 	cmp.w	lr, #0
 8000336:	d134      	bne.n	80003a2 <__udivmoddi4+0x16e>
 8000338:	1beb      	subs	r3, r5, r7
 800033a:	0c3a      	lsrs	r2, r7, #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb3 f8f2 	udiv	r8, r3, r2
 8000346:	0c25      	lsrs	r5, r4, #16
 8000348:	fb02 3318 	mls	r3, r2, r8, r3
 800034c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000350:	fb0c f308 	mul.w	r3, ip, r8
 8000354:	42ab      	cmp	r3, r5
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x134>
 8000358:	19ed      	adds	r5, r5, r7
 800035a:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x132>
 8000360:	42ab      	cmp	r3, r5
 8000362:	f200 80d1 	bhi.w	8000508 <__udivmoddi4+0x2d4>
 8000366:	4680      	mov	r8, r0
 8000368:	1aed      	subs	r5, r5, r3
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000370:	fb02 5510 	mls	r5, r2, r0, r5
 8000374:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000378:	fb0c fc00 	mul.w	ip, ip, r0
 800037c:	45a4      	cmp	ip, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x15c>
 8000380:	19e4      	adds	r4, r4, r7
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x15a>
 8000388:	45a4      	cmp	ip, r4
 800038a:	f200 80b8 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 040c 	sub.w	r4, r4, ip
 8000394:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000398:	e79d      	b.n	80002d6 <__udivmoddi4+0xa2>
 800039a:	4631      	mov	r1, r6
 800039c:	4630      	mov	r0, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	f1ce 0420 	rsb	r4, lr, #32
 80003a6:	fa05 f30e 	lsl.w	r3, r5, lr
 80003aa:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ae:	fa20 f804 	lsr.w	r8, r0, r4
 80003b2:	0c3a      	lsrs	r2, r7, #16
 80003b4:	fa25 f404 	lsr.w	r4, r5, r4
 80003b8:	ea48 0803 	orr.w	r8, r8, r3
 80003bc:	fbb4 f1f2 	udiv	r1, r4, r2
 80003c0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c4:	fb02 4411 	mls	r4, r2, r1, r4
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003d0:	fb01 f30c 	mul.w	r3, r1, ip
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1bc>
 80003dc:	19ed      	adds	r5, r5, r7
 80003de:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003e2:	f080 808a 	bcs.w	80004fa <__udivmoddi4+0x2c6>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	f240 8087 	bls.w	80004fa <__udivmoddi4+0x2c6>
 80003ec:	3902      	subs	r1, #2
 80003ee:	443d      	add	r5, r7
 80003f0:	1aeb      	subs	r3, r5, r3
 80003f2:	fa1f f588 	uxth.w	r5, r8
 80003f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003fa:	fb02 3310 	mls	r3, r2, r0, r3
 80003fe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000402:	fb00 f30c 	mul.w	r3, r0, ip
 8000406:	42ab      	cmp	r3, r5
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1e6>
 800040a:	19ed      	adds	r5, r5, r7
 800040c:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000410:	d26f      	bcs.n	80004f2 <__udivmoddi4+0x2be>
 8000412:	42ab      	cmp	r3, r5
 8000414:	d96d      	bls.n	80004f2 <__udivmoddi4+0x2be>
 8000416:	3802      	subs	r0, #2
 8000418:	443d      	add	r5, r7
 800041a:	1aeb      	subs	r3, r5, r3
 800041c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000420:	e78f      	b.n	8000342 <__udivmoddi4+0x10e>
 8000422:	f1c1 0720 	rsb	r7, r1, #32
 8000426:	fa22 f807 	lsr.w	r8, r2, r7
 800042a:	408b      	lsls	r3, r1
 800042c:	fa05 f401 	lsl.w	r4, r5, r1
 8000430:	ea48 0303 	orr.w	r3, r8, r3
 8000434:	fa20 fe07 	lsr.w	lr, r0, r7
 8000438:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800043c:	40fd      	lsrs	r5, r7
 800043e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000442:	fbb5 f9fc 	udiv	r9, r5, ip
 8000446:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800044a:	fb0c 5519 	mls	r5, ip, r9, r5
 800044e:	fa1f f883 	uxth.w	r8, r3
 8000452:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000456:	fb09 f408 	mul.w	r4, r9, r8
 800045a:	42ac      	cmp	r4, r5
 800045c:	fa02 f201 	lsl.w	r2, r2, r1
 8000460:	fa00 fa01 	lsl.w	sl, r0, r1
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x244>
 8000466:	18ed      	adds	r5, r5, r3
 8000468:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800046c:	d243      	bcs.n	80004f6 <__udivmoddi4+0x2c2>
 800046e:	42ac      	cmp	r4, r5
 8000470:	d941      	bls.n	80004f6 <__udivmoddi4+0x2c2>
 8000472:	f1a9 0902 	sub.w	r9, r9, #2
 8000476:	441d      	add	r5, r3
 8000478:	1b2d      	subs	r5, r5, r4
 800047a:	fa1f fe8e 	uxth.w	lr, lr
 800047e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000482:	fb0c 5510 	mls	r5, ip, r0, r5
 8000486:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800048a:	fb00 f808 	mul.w	r8, r0, r8
 800048e:	45a0      	cmp	r8, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x26e>
 8000492:	18e4      	adds	r4, r4, r3
 8000494:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000498:	d229      	bcs.n	80004ee <__udivmoddi4+0x2ba>
 800049a:	45a0      	cmp	r8, r4
 800049c:	d927      	bls.n	80004ee <__udivmoddi4+0x2ba>
 800049e:	3802      	subs	r0, #2
 80004a0:	441c      	add	r4, r3
 80004a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a6:	eba4 0408 	sub.w	r4, r4, r8
 80004aa:	fba0 8902 	umull	r8, r9, r0, r2
 80004ae:	454c      	cmp	r4, r9
 80004b0:	46c6      	mov	lr, r8
 80004b2:	464d      	mov	r5, r9
 80004b4:	d315      	bcc.n	80004e2 <__udivmoddi4+0x2ae>
 80004b6:	d012      	beq.n	80004de <__udivmoddi4+0x2aa>
 80004b8:	b156      	cbz	r6, 80004d0 <__udivmoddi4+0x29c>
 80004ba:	ebba 030e 	subs.w	r3, sl, lr
 80004be:	eb64 0405 	sbc.w	r4, r4, r5
 80004c2:	fa04 f707 	lsl.w	r7, r4, r7
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431f      	orrs	r7, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	6037      	str	r7, [r6, #0]
 80004ce:	6074      	str	r4, [r6, #4]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d6:	4618      	mov	r0, r3
 80004d8:	e6f8      	b.n	80002cc <__udivmoddi4+0x98>
 80004da:	4690      	mov	r8, r2
 80004dc:	e6e0      	b.n	80002a0 <__udivmoddi4+0x6c>
 80004de:	45c2      	cmp	sl, r8
 80004e0:	d2ea      	bcs.n	80004b8 <__udivmoddi4+0x284>
 80004e2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ea:	3801      	subs	r0, #1
 80004ec:	e7e4      	b.n	80004b8 <__udivmoddi4+0x284>
 80004ee:	4628      	mov	r0, r5
 80004f0:	e7d7      	b.n	80004a2 <__udivmoddi4+0x26e>
 80004f2:	4640      	mov	r0, r8
 80004f4:	e791      	b.n	800041a <__udivmoddi4+0x1e6>
 80004f6:	4681      	mov	r9, r0
 80004f8:	e7be      	b.n	8000478 <__udivmoddi4+0x244>
 80004fa:	4601      	mov	r1, r0
 80004fc:	e778      	b.n	80003f0 <__udivmoddi4+0x1bc>
 80004fe:	3802      	subs	r0, #2
 8000500:	443c      	add	r4, r7
 8000502:	e745      	b.n	8000390 <__udivmoddi4+0x15c>
 8000504:	4608      	mov	r0, r1
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xe6>
 8000508:	f1a8 0802 	sub.w	r8, r8, #2
 800050c:	443d      	add	r5, r7
 800050e:	e72b      	b.n	8000368 <__udivmoddi4+0x134>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000514:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000516:	4a0e      	ldr	r2, [pc, #56]	; (8000550 <HAL_InitTick+0x3c>)
 8000518:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <HAL_InitTick+0x40>)
{
 800051a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800051c:	7818      	ldrb	r0, [r3, #0]
 800051e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000522:	fbb3 f3f0 	udiv	r3, r3, r0
 8000526:	6810      	ldr	r0, [r2, #0]
 8000528:	fbb0 f0f3 	udiv	r0, r0, r3
 800052c:	f000 f888 	bl	8000640 <HAL_SYSTICK_Config>
 8000530:	4604      	mov	r4, r0
 8000532:	b958      	cbnz	r0, 800054c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000534:	2d0f      	cmp	r5, #15
 8000536:	d809      	bhi.n	800054c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000538:	4602      	mov	r2, r0
 800053a:	4629      	mov	r1, r5
 800053c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000540:	f000 f84a 	bl	80005d8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000544:	4b04      	ldr	r3, [pc, #16]	; (8000558 <HAL_InitTick+0x44>)
 8000546:	4620      	mov	r0, r4
 8000548:	601d      	str	r5, [r3, #0]
 800054a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800054c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800054e:	bd38      	pop	{r3, r4, r5, pc}
 8000550:	20000008 	.word	0x20000008
 8000554:	20000000 	.word	0x20000000
 8000558:	20000004 	.word	0x20000004

0800055c <HAL_Init>:
{
 800055c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800055e:	4b0b      	ldr	r3, [pc, #44]	; (800058c <HAL_Init+0x30>)
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000566:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800056e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000576:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000578:	2003      	movs	r0, #3
 800057a:	f000 f81b 	bl	80005b4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800057e:	2000      	movs	r0, #0
 8000580:	f7ff ffc8 	bl	8000514 <HAL_InitTick>
  HAL_MspInit();
 8000584:	f000 fe38 	bl	80011f8 <HAL_MspInit>
}
 8000588:	2000      	movs	r0, #0
 800058a:	bd08      	pop	{r3, pc}
 800058c:	40023c00 	.word	0x40023c00

08000590 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000590:	4a03      	ldr	r2, [pc, #12]	; (80005a0 <HAL_IncTick+0x10>)
 8000592:	4b04      	ldr	r3, [pc, #16]	; (80005a4 <HAL_IncTick+0x14>)
 8000594:	6811      	ldr	r1, [r2, #0]
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	440b      	add	r3, r1
 800059a:	6013      	str	r3, [r2, #0]
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20000040 	.word	0x20000040
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005a8:	4b01      	ldr	r3, [pc, #4]	; (80005b0 <HAL_GetTick+0x8>)
 80005aa:	6818      	ldr	r0, [r3, #0]
}
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000040 	.word	0x20000040

080005b4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005b4:	4a07      	ldr	r2, [pc, #28]	; (80005d4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005b6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005b8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005bc:	041b      	lsls	r3, r3, #16
 80005be:	0c1b      	lsrs	r3, r3, #16
 80005c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005c4:	0200      	lsls	r0, r0, #8
 80005c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ca:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005ce:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005d0:	60d3      	str	r3, [r2, #12]
 80005d2:	4770      	bx	lr
 80005d4:	e000ed00 	.word	0xe000ed00

080005d8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005d8:	4b17      	ldr	r3, [pc, #92]	; (8000638 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	68dc      	ldr	r4, [r3, #12]
 80005de:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005e2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005e8:	2b04      	cmp	r3, #4
 80005ea:	bf28      	it	cs
 80005ec:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ee:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005f0:	f04f 0501 	mov.w	r5, #1
 80005f4:	fa05 f303 	lsl.w	r3, r5, r3
 80005f8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005fc:	bf8c      	ite	hi
 80005fe:	3c03      	subhi	r4, #3
 8000600:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000602:	4019      	ands	r1, r3
 8000604:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000606:	fa05 f404 	lsl.w	r4, r5, r4
 800060a:	3c01      	subs	r4, #1
 800060c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800060e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000610:	ea42 0201 	orr.w	r2, r2, r1
 8000614:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000618:	bfad      	iteet	ge
 800061a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061e:	f000 000f 	andlt.w	r0, r0, #15
 8000622:	4b06      	ldrlt	r3, [pc, #24]	; (800063c <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000624:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000628:	bfb5      	itete	lt
 800062a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000630:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	bf00      	nop
 8000638:	e000ed00 	.word	0xe000ed00
 800063c:	e000ed14 	.word	0xe000ed14

08000640 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000640:	3801      	subs	r0, #1
 8000642:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000646:	d20a      	bcs.n	800065e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064a:	4a07      	ldr	r2, [pc, #28]	; (8000668 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800064c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064e:	21f0      	movs	r1, #240	; 0xf0
 8000650:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000654:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000656:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000658:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800065e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	e000e010 	.word	0xe000e010
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800066c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000670:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000672:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000674:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8000818 <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000678:	4a65      	ldr	r2, [pc, #404]	; (8000810 <HAL_GPIO_Init+0x1a4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800067a:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 800081c <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800067e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000680:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000682:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000684:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 8000686:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000688:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 800068a:	42ac      	cmp	r4, r5
 800068c:	f040 80ac 	bne.w	80007e8 <HAL_GPIO_Init+0x17c>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000690:	684c      	ldr	r4, [r1, #4]
 8000692:	f024 0c10 	bic.w	ip, r4, #16
 8000696:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
 800069a:	2e01      	cmp	r6, #1
 800069c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80006a0:	d812      	bhi.n	80006c8 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 80006a2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80006a4:	2603      	movs	r6, #3
 80006a6:	fa06 f60e 	lsl.w	r6, r6, lr
 80006aa:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80006ae:	68ce      	ldr	r6, [r1, #12]
 80006b0:	fa06 f60e 	lsl.w	r6, r6, lr
 80006b4:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 80006b6:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80006b8:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006ba:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006be:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006c2:	409e      	lsls	r6, r3
 80006c4:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 80006c6:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006c8:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 80006ca:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006cc:	fa06 f60e 	lsl.w	r6, r6, lr
 80006d0:	43f6      	mvns	r6, r6
 80006d2:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80006d6:	688f      	ldr	r7, [r1, #8]
 80006d8:	fa07 f70e 	lsl.w	r7, r7, lr
 80006dc:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006e0:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 80006e4:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006e6:	d116      	bne.n	8000716 <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 80006e8:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80006ec:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006f0:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80006f4:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006f8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80006fc:	f04f 0c0f 	mov.w	ip, #15
 8000700:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000704:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000708:	690f      	ldr	r7, [r1, #16]
 800070a:	fa07 f70b 	lsl.w	r7, r7, fp
 800070e:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000712:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8000716:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000718:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800071a:	f004 0703 	and.w	r7, r4, #3
 800071e:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000722:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8000726:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000728:	00e6      	lsls	r6, r4, #3
 800072a:	d55d      	bpl.n	80007e8 <HAL_GPIO_Init+0x17c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072c:	f04f 0b00 	mov.w	fp, #0
 8000730:	f8cd b00c 	str.w	fp, [sp, #12]
 8000734:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000738:	4e36      	ldr	r6, [pc, #216]	; (8000814 <HAL_GPIO_Init+0x1a8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073a:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800073e:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000742:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000746:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800074a:	9703      	str	r7, [sp, #12]
 800074c:	9f03      	ldr	r7, [sp, #12]
 800074e:	f023 0703 	bic.w	r7, r3, #3
 8000752:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000756:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800075a:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800075e:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000762:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000766:	f04f 0e0f 	mov.w	lr, #15
 800076a:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800076e:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000770:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000774:	d03f      	beq.n	80007f6 <HAL_GPIO_Init+0x18a>
 8000776:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800077a:	42b0      	cmp	r0, r6
 800077c:	d03d      	beq.n	80007fa <HAL_GPIO_Init+0x18e>
 800077e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000782:	42b0      	cmp	r0, r6
 8000784:	d03b      	beq.n	80007fe <HAL_GPIO_Init+0x192>
 8000786:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800078a:	42b0      	cmp	r0, r6
 800078c:	d039      	beq.n	8000802 <HAL_GPIO_Init+0x196>
 800078e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000792:	42b0      	cmp	r0, r6
 8000794:	d037      	beq.n	8000806 <HAL_GPIO_Init+0x19a>
 8000796:	4548      	cmp	r0, r9
 8000798:	d037      	beq.n	800080a <HAL_GPIO_Init+0x19e>
 800079a:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800079e:	42b0      	cmp	r0, r6
 80007a0:	bf14      	ite	ne
 80007a2:	2607      	movne	r6, #7
 80007a4:	2606      	moveq	r6, #6
 80007a6:	fa06 f60c 	lsl.w	r6, r6, ip
 80007aa:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80007ae:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 80007b0:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80007b2:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007b4:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80007b8:	bf0c      	ite	eq
 80007ba:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80007bc:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 80007be:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 80007c0:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007c2:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80007c6:	bf0c      	ite	eq
 80007c8:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80007ca:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 80007cc:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007ce:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007d0:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80007d4:	bf0c      	ite	eq
 80007d6:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80007d8:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 80007da:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 80007dc:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007de:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80007e0:	bf54      	ite	pl
 80007e2:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 80007e4:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 80007e6:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007e8:	3301      	adds	r3, #1
 80007ea:	2b10      	cmp	r3, #16
 80007ec:	f47f af49 	bne.w	8000682 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80007f0:	b005      	add	sp, #20
 80007f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007f6:	465e      	mov	r6, fp
 80007f8:	e7d5      	b.n	80007a6 <HAL_GPIO_Init+0x13a>
 80007fa:	2601      	movs	r6, #1
 80007fc:	e7d3      	b.n	80007a6 <HAL_GPIO_Init+0x13a>
 80007fe:	2602      	movs	r6, #2
 8000800:	e7d1      	b.n	80007a6 <HAL_GPIO_Init+0x13a>
 8000802:	2603      	movs	r6, #3
 8000804:	e7cf      	b.n	80007a6 <HAL_GPIO_Init+0x13a>
 8000806:	2604      	movs	r6, #4
 8000808:	e7cd      	b.n	80007a6 <HAL_GPIO_Init+0x13a>
 800080a:	2605      	movs	r6, #5
 800080c:	e7cb      	b.n	80007a6 <HAL_GPIO_Init+0x13a>
 800080e:	bf00      	nop
 8000810:	40013c00 	.word	0x40013c00
 8000814:	40020000 	.word	0x40020000
 8000818:	40023800 	.word	0x40023800
 800081c:	40021400 	.word	0x40021400

08000820 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000820:	6903      	ldr	r3, [r0, #16]
 8000822:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000824:	bf14      	ite	ne
 8000826:	2001      	movne	r0, #1
 8000828:	2000      	moveq	r0, #0
 800082a:	4770      	bx	lr

0800082c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800082c:	b10a      	cbz	r2, 8000832 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800082e:	6181      	str	r1, [r0, #24]
 8000830:	4770      	bx	lr
 8000832:	0409      	lsls	r1, r1, #16
 8000834:	e7fb      	b.n	800082e <HAL_GPIO_WritePin+0x2>
	...

08000838 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800083c:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800083e:	4604      	mov	r4, r0
 8000840:	b910      	cbnz	r0, 8000848 <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 8000842:	2001      	movs	r0, #1
 8000844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000848:	4b44      	ldr	r3, [pc, #272]	; (800095c <HAL_RCC_ClockConfig+0x124>)
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	f002 020f 	and.w	r2, r2, #15
 8000850:	428a      	cmp	r2, r1
 8000852:	d329      	bcc.n	80008a8 <HAL_RCC_ClockConfig+0x70>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000854:	6821      	ldr	r1, [r4, #0]
 8000856:	078f      	lsls	r7, r1, #30
 8000858:	d42e      	bmi.n	80008b8 <HAL_RCC_ClockConfig+0x80>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800085a:	07c8      	lsls	r0, r1, #31
 800085c:	d441      	bmi.n	80008e2 <HAL_RCC_ClockConfig+0xaa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800085e:	4b3f      	ldr	r3, [pc, #252]	; (800095c <HAL_RCC_ClockConfig+0x124>)
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	f002 020f 	and.w	r2, r2, #15
 8000866:	4295      	cmp	r5, r2
 8000868:	d367      	bcc.n	800093a <HAL_RCC_ClockConfig+0x102>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800086a:	6822      	ldr	r2, [r4, #0]
 800086c:	0751      	lsls	r1, r2, #29
 800086e:	d46d      	bmi.n	800094c <HAL_RCC_ClockConfig+0x114>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000870:	0713      	lsls	r3, r2, #28
 8000872:	d507      	bpl.n	8000884 <HAL_RCC_ClockConfig+0x4c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000874:	4a3a      	ldr	r2, [pc, #232]	; (8000960 <HAL_RCC_ClockConfig+0x128>)
 8000876:	6921      	ldr	r1, [r4, #16]
 8000878:	6893      	ldr	r3, [r2, #8]
 800087a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800087e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000882:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000884:	f000 f894 	bl	80009b0 <HAL_RCC_GetSysClockFreq>
 8000888:	4b35      	ldr	r3, [pc, #212]	; (8000960 <HAL_RCC_ClockConfig+0x128>)
 800088a:	4a36      	ldr	r2, [pc, #216]	; (8000964 <HAL_RCC_ClockConfig+0x12c>)
 800088c:	689b      	ldr	r3, [r3, #8]
 800088e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000892:	5cd3      	ldrb	r3, [r2, r3]
 8000894:	40d8      	lsrs	r0, r3
 8000896:	4b34      	ldr	r3, [pc, #208]	; (8000968 <HAL_RCC_ClockConfig+0x130>)
 8000898:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800089a:	4b34      	ldr	r3, [pc, #208]	; (800096c <HAL_RCC_ClockConfig+0x134>)
 800089c:	6818      	ldr	r0, [r3, #0]
 800089e:	f7ff fe39 	bl	8000514 <HAL_InitTick>

  return HAL_OK;
 80008a2:	2000      	movs	r0, #0
 80008a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80008a8:	b2ca      	uxtb	r2, r1
 80008aa:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f003 030f 	and.w	r3, r3, #15
 80008b2:	4299      	cmp	r1, r3
 80008b4:	d1c5      	bne.n	8000842 <HAL_RCC_ClockConfig+0xa>
 80008b6:	e7cd      	b.n	8000854 <HAL_RCC_ClockConfig+0x1c>
 80008b8:	4b29      	ldr	r3, [pc, #164]	; (8000960 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80008ba:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80008be:	bf1e      	ittt	ne
 80008c0:	689a      	ldrne	r2, [r3, #8]
 80008c2:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80008c6:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80008c8:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80008ca:	bf42      	ittt	mi
 80008cc:	689a      	ldrmi	r2, [r3, #8]
 80008ce:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80008d2:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80008d4:	689a      	ldr	r2, [r3, #8]
 80008d6:	68a0      	ldr	r0, [r4, #8]
 80008d8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80008dc:	4302      	orrs	r2, r0
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	e7bb      	b.n	800085a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008e2:	6862      	ldr	r2, [r4, #4]
 80008e4:	4b1e      	ldr	r3, [pc, #120]	; (8000960 <HAL_RCC_ClockConfig+0x128>)
 80008e6:	2a01      	cmp	r2, #1
 80008e8:	d11d      	bne.n	8000926 <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008f0:	d0a7      	beq.n	8000842 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008f2:	4e1b      	ldr	r6, [pc, #108]	; (8000960 <HAL_RCC_ClockConfig+0x128>)
 80008f4:	68b3      	ldr	r3, [r6, #8]
 80008f6:	f023 0303 	bic.w	r3, r3, #3
 80008fa:	4313      	orrs	r3, r2
 80008fc:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80008fe:	f7ff fe53 	bl	80005a8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000902:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000906:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000908:	68b3      	ldr	r3, [r6, #8]
 800090a:	6862      	ldr	r2, [r4, #4]
 800090c:	f003 030c 	and.w	r3, r3, #12
 8000910:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000914:	d0a3      	beq.n	800085e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000916:	f7ff fe47 	bl	80005a8 <HAL_GetTick>
 800091a:	1bc0      	subs	r0, r0, r7
 800091c:	4540      	cmp	r0, r8
 800091e:	d9f3      	bls.n	8000908 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8000920:	2003      	movs	r0, #3
}
 8000922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000926:	1e91      	subs	r1, r2, #2
 8000928:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800092a:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800092c:	d802      	bhi.n	8000934 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800092e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000932:	e7dd      	b.n	80008f0 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000934:	f013 0f02 	tst.w	r3, #2
 8000938:	e7da      	b.n	80008f0 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800093a:	b2ea      	uxtb	r2, r5
 800093c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f003 030f 	and.w	r3, r3, #15
 8000944:	429d      	cmp	r5, r3
 8000946:	f47f af7c 	bne.w	8000842 <HAL_RCC_ClockConfig+0xa>
 800094a:	e78e      	b.n	800086a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800094c:	4904      	ldr	r1, [pc, #16]	; (8000960 <HAL_RCC_ClockConfig+0x128>)
 800094e:	68e0      	ldr	r0, [r4, #12]
 8000950:	688b      	ldr	r3, [r1, #8]
 8000952:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000956:	4303      	orrs	r3, r0
 8000958:	608b      	str	r3, [r1, #8]
 800095a:	e789      	b.n	8000870 <HAL_RCC_ClockConfig+0x38>
 800095c:	40023c00 	.word	0x40023c00
 8000960:	40023800 	.word	0x40023800
 8000964:	080013d4 	.word	0x080013d4
 8000968:	20000008 	.word	0x20000008
 800096c:	20000004 	.word	0x20000004

08000970 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000970:	4b04      	ldr	r3, [pc, #16]	; (8000984 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000972:	4a05      	ldr	r2, [pc, #20]	; (8000988 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000974:	689b      	ldr	r3, [r3, #8]
 8000976:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800097a:	5cd3      	ldrb	r3, [r2, r3]
 800097c:	4a03      	ldr	r2, [pc, #12]	; (800098c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800097e:	6810      	ldr	r0, [r2, #0]
}
 8000980:	40d8      	lsrs	r0, r3
 8000982:	4770      	bx	lr
 8000984:	40023800 	.word	0x40023800
 8000988:	080013e4 	.word	0x080013e4
 800098c:	20000008 	.word	0x20000008

08000990 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000990:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000992:	4a05      	ldr	r2, [pc, #20]	; (80009a8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000994:	689b      	ldr	r3, [r3, #8]
 8000996:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800099a:	5cd3      	ldrb	r3, [r2, r3]
 800099c:	4a03      	ldr	r2, [pc, #12]	; (80009ac <HAL_RCC_GetPCLK2Freq+0x1c>)
 800099e:	6810      	ldr	r0, [r2, #0]
}
 80009a0:	40d8      	lsrs	r0, r3
 80009a2:	4770      	bx	lr
 80009a4:	40023800 	.word	0x40023800
 80009a8:	080013e4 	.word	0x080013e4
 80009ac:	20000008 	.word	0x20000008

080009b0 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80009b0:	4920      	ldr	r1, [pc, #128]	; (8000a34 <HAL_RCC_GetSysClockFreq+0x84>)
{
 80009b2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80009b4:	688b      	ldr	r3, [r1, #8]
 80009b6:	f003 030c 	and.w	r3, r3, #12
 80009ba:	2b08      	cmp	r3, #8
 80009bc:	d007      	beq.n	80009ce <HAL_RCC_GetSysClockFreq+0x1e>
 80009be:	2b0c      	cmp	r3, #12
 80009c0:	d020      	beq.n	8000a04 <HAL_RCC_GetSysClockFreq+0x54>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80009c2:	4a1d      	ldr	r2, [pc, #116]	; (8000a38 <HAL_RCC_GetSysClockFreq+0x88>)
 80009c4:	481d      	ldr	r0, [pc, #116]	; (8000a3c <HAL_RCC_GetSysClockFreq+0x8c>)
 80009c6:	2b04      	cmp	r3, #4
 80009c8:	bf18      	it	ne
 80009ca:	4610      	movne	r0, r2
 80009cc:	bd08      	pop	{r3, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80009ce:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80009d0:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80009d2:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80009d4:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80009d8:	bf14      	ite	ne
 80009da:	4818      	ldrne	r0, [pc, #96]	; (8000a3c <HAL_RCC_GetSysClockFreq+0x8c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80009dc:	4816      	ldreq	r0, [pc, #88]	; (8000a38 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80009de:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80009e2:	bf18      	it	ne
 80009e4:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80009e6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80009ea:	fba1 0100 	umull	r0, r1, r1, r0
 80009ee:	f7ff fc09 	bl	8000204 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80009f2:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <HAL_RCC_GetSysClockFreq+0x84>)
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80009fa:	3301      	adds	r3, #1
 80009fc:	005b      	lsls	r3, r3, #1
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);

      sysclockfreq = pllvco/pllr;
 80009fe:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000a02:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000a04:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000a06:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000a08:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000a0a:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000a0e:	bf14      	ite	ne
 8000a10:	480a      	ldrne	r0, [pc, #40]	; (8000a3c <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000a12:	4809      	ldreq	r0, [pc, #36]	; (8000a38 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000a14:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000a18:	bf18      	it	ne
 8000a1a:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000a1c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000a20:	fba1 0100 	umull	r0, r1, r1, r0
 8000a24:	f7ff fbee 	bl	8000204 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8000a28:	4b02      	ldr	r3, [pc, #8]	; (8000a34 <HAL_RCC_GetSysClockFreq+0x84>)
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8000a30:	e7e5      	b.n	80009fe <HAL_RCC_GetSysClockFreq+0x4e>
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800
 8000a38:	00f42400 	.word	0x00f42400
 8000a3c:	007a1200 	.word	0x007a1200

08000a40 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a40:	6803      	ldr	r3, [r0, #0]
{
 8000a42:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a46:	07df      	lsls	r7, r3, #31
{
 8000a48:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a4a:	d410      	bmi.n	8000a6e <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a4c:	6823      	ldr	r3, [r4, #0]
 8000a4e:	079e      	lsls	r6, r3, #30
 8000a50:	d467      	bmi.n	8000b22 <HAL_RCC_OscConfig+0xe2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a52:	6823      	ldr	r3, [r4, #0]
 8000a54:	071a      	lsls	r2, r3, #28
 8000a56:	f100 80b2 	bmi.w	8000bbe <HAL_RCC_OscConfig+0x17e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a5a:	6823      	ldr	r3, [r4, #0]
 8000a5c:	075b      	lsls	r3, r3, #29
 8000a5e:	f100 80d0 	bmi.w	8000c02 <HAL_RCC_OscConfig+0x1c2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000a62:	69a2      	ldr	r2, [r4, #24]
 8000a64:	2a00      	cmp	r2, #0
 8000a66:	f040 8139 	bne.w	8000cdc <HAL_RCC_OscConfig+0x29c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	e01e      	b.n	8000aac <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000a6e:	4b97      	ldr	r3, [pc, #604]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
 8000a70:	689a      	ldr	r2, [r3, #8]
 8000a72:	f002 020c 	and.w	r2, r2, #12
 8000a76:	2a04      	cmp	r2, #4
 8000a78:	d010      	beq.n	8000a9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000a7a:	689a      	ldr	r2, [r3, #8]
 8000a7c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000a80:	2a08      	cmp	r2, #8
 8000a82:	d102      	bne.n	8000a8a <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	025d      	lsls	r5, r3, #9
 8000a88:	d408      	bmi.n	8000a9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000a8a:	4b90      	ldr	r3, [pc, #576]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
 8000a8c:	689a      	ldr	r2, [r3, #8]
 8000a8e:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000a92:	2a0c      	cmp	r2, #12
 8000a94:	d10d      	bne.n	8000ab2 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000a96:	685a      	ldr	r2, [r3, #4]
 8000a98:	0250      	lsls	r0, r2, #9
 8000a9a:	d50a      	bpl.n	8000ab2 <HAL_RCC_OscConfig+0x72>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a9c:	4b8b      	ldr	r3, [pc, #556]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	0399      	lsls	r1, r3, #14
 8000aa2:	d5d3      	bpl.n	8000a4c <HAL_RCC_OscConfig+0xc>
 8000aa4:	6863      	ldr	r3, [r4, #4]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d1d0      	bne.n	8000a4c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000aaa:	2001      	movs	r0, #1
}
 8000aac:	b002      	add	sp, #8
 8000aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ab2:	6862      	ldr	r2, [r4, #4]
 8000ab4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000ab8:	d111      	bne.n	8000ade <HAL_RCC_OscConfig+0x9e>
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000ac0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ac2:	f7ff fd71 	bl	80005a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ac6:	4d81      	ldr	r5, [pc, #516]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8000ac8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000aca:	682b      	ldr	r3, [r5, #0]
 8000acc:	039a      	lsls	r2, r3, #14
 8000ace:	d4bd      	bmi.n	8000a4c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ad0:	f7ff fd6a 	bl	80005a8 <HAL_GetTick>
 8000ad4:	1b80      	subs	r0, r0, r6
 8000ad6:	2864      	cmp	r0, #100	; 0x64
 8000ad8:	d9f7      	bls.n	8000aca <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 8000ada:	2003      	movs	r0, #3
 8000adc:	e7e6      	b.n	8000aac <HAL_RCC_OscConfig+0x6c>
 8000ade:	4d7b      	ldr	r5, [pc, #492]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ae0:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000ae4:	682b      	ldr	r3, [r5, #0]
 8000ae6:	d107      	bne.n	8000af8 <HAL_RCC_OscConfig+0xb8>
 8000ae8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000aec:	602b      	str	r3, [r5, #0]
 8000aee:	682b      	ldr	r3, [r5, #0]
 8000af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000af4:	602b      	str	r3, [r5, #0]
 8000af6:	e7e4      	b.n	8000ac2 <HAL_RCC_OscConfig+0x82>
 8000af8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000afc:	602b      	str	r3, [r5, #0]
 8000afe:	682b      	ldr	r3, [r5, #0]
 8000b00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b04:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000b06:	2a00      	cmp	r2, #0
 8000b08:	d1db      	bne.n	8000ac2 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8000b0a:	f7ff fd4d 	bl	80005a8 <HAL_GetTick>
 8000b0e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b10:	682b      	ldr	r3, [r5, #0]
 8000b12:	039b      	lsls	r3, r3, #14
 8000b14:	d59a      	bpl.n	8000a4c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b16:	f7ff fd47 	bl	80005a8 <HAL_GetTick>
 8000b1a:	1b80      	subs	r0, r0, r6
 8000b1c:	2864      	cmp	r0, #100	; 0x64
 8000b1e:	d9f7      	bls.n	8000b10 <HAL_RCC_OscConfig+0xd0>
 8000b20:	e7db      	b.n	8000ada <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000b22:	4b6a      	ldr	r3, [pc, #424]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
 8000b24:	689a      	ldr	r2, [r3, #8]
 8000b26:	f012 0f0c 	tst.w	r2, #12
 8000b2a:	d010      	beq.n	8000b4e <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000b2c:	689a      	ldr	r2, [r3, #8]
 8000b2e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000b32:	2a08      	cmp	r2, #8
 8000b34:	d102      	bne.n	8000b3c <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	025f      	lsls	r7, r3, #9
 8000b3a:	d508      	bpl.n	8000b4e <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000b3c:	4a63      	ldr	r2, [pc, #396]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
 8000b3e:	6893      	ldr	r3, [r2, #8]
 8000b40:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000b44:	2b0c      	cmp	r3, #12
 8000b46:	d111      	bne.n	8000b6c <HAL_RCC_OscConfig+0x12c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000b48:	6853      	ldr	r3, [r2, #4]
 8000b4a:	025e      	lsls	r6, r3, #9
 8000b4c:	d40e      	bmi.n	8000b6c <HAL_RCC_OscConfig+0x12c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b4e:	4b5f      	ldr	r3, [pc, #380]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	0795      	lsls	r5, r2, #30
 8000b54:	d502      	bpl.n	8000b5c <HAL_RCC_OscConfig+0x11c>
 8000b56:	68e2      	ldr	r2, [r4, #12]
 8000b58:	2a01      	cmp	r2, #1
 8000b5a:	d1a6      	bne.n	8000aaa <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	6921      	ldr	r1, [r4, #16]
 8000b60:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000b64:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000b68:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b6a:	e772      	b.n	8000a52 <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000b6c:	68e2      	ldr	r2, [r4, #12]
 8000b6e:	4b58      	ldr	r3, [pc, #352]	; (8000cd0 <HAL_RCC_OscConfig+0x290>)
 8000b70:	b1b2      	cbz	r2, 8000ba0 <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_ENABLE();
 8000b72:	2201      	movs	r2, #1
 8000b74:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b76:	f7ff fd17 	bl	80005a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b7a:	4d54      	ldr	r5, [pc, #336]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8000b7c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b7e:	682b      	ldr	r3, [r5, #0]
 8000b80:	0798      	lsls	r0, r3, #30
 8000b82:	d507      	bpl.n	8000b94 <HAL_RCC_OscConfig+0x154>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b84:	682b      	ldr	r3, [r5, #0]
 8000b86:	6922      	ldr	r2, [r4, #16]
 8000b88:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000b8c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000b90:	602b      	str	r3, [r5, #0]
 8000b92:	e75e      	b.n	8000a52 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b94:	f7ff fd08 	bl	80005a8 <HAL_GetTick>
 8000b98:	1b80      	subs	r0, r0, r6
 8000b9a:	2802      	cmp	r0, #2
 8000b9c:	d9ef      	bls.n	8000b7e <HAL_RCC_OscConfig+0x13e>
 8000b9e:	e79c      	b.n	8000ada <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 8000ba0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ba2:	f7ff fd01 	bl	80005a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ba6:	4d49      	ldr	r5, [pc, #292]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8000ba8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000baa:	682b      	ldr	r3, [r5, #0]
 8000bac:	0799      	lsls	r1, r3, #30
 8000bae:	f57f af50 	bpl.w	8000a52 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bb2:	f7ff fcf9 	bl	80005a8 <HAL_GetTick>
 8000bb6:	1b80      	subs	r0, r0, r6
 8000bb8:	2802      	cmp	r0, #2
 8000bba:	d9f6      	bls.n	8000baa <HAL_RCC_OscConfig+0x16a>
 8000bbc:	e78d      	b.n	8000ada <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000bbe:	6962      	ldr	r2, [r4, #20]
 8000bc0:	4b44      	ldr	r3, [pc, #272]	; (8000cd4 <HAL_RCC_OscConfig+0x294>)
 8000bc2:	b17a      	cbz	r2, 8000be4 <HAL_RCC_OscConfig+0x1a4>
      __HAL_RCC_LSI_ENABLE();
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000bc8:	f7ff fcee 	bl	80005a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000bcc:	4d3f      	ldr	r5, [pc, #252]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8000bce:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000bd0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000bd2:	079f      	lsls	r7, r3, #30
 8000bd4:	f53f af41 	bmi.w	8000a5a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000bd8:	f7ff fce6 	bl	80005a8 <HAL_GetTick>
 8000bdc:	1b80      	subs	r0, r0, r6
 8000bde:	2802      	cmp	r0, #2
 8000be0:	d9f6      	bls.n	8000bd0 <HAL_RCC_OscConfig+0x190>
 8000be2:	e77a      	b.n	8000ada <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 8000be4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000be6:	f7ff fcdf 	bl	80005a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000bea:	4d38      	ldr	r5, [pc, #224]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8000bec:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000bee:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000bf0:	0798      	lsls	r0, r3, #30
 8000bf2:	f57f af32 	bpl.w	8000a5a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000bf6:	f7ff fcd7 	bl	80005a8 <HAL_GetTick>
 8000bfa:	1b80      	subs	r0, r0, r6
 8000bfc:	2802      	cmp	r0, #2
 8000bfe:	d9f6      	bls.n	8000bee <HAL_RCC_OscConfig+0x1ae>
 8000c00:	e76b      	b.n	8000ada <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c02:	4b32      	ldr	r3, [pc, #200]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
 8000c04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c06:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000c0a:	d128      	bne.n	8000c5e <HAL_RCC_OscConfig+0x21e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c0c:	9201      	str	r2, [sp, #4]
 8000c0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c10:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c14:	641a      	str	r2, [r3, #64]	; 0x40
 8000c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1c:	9301      	str	r3, [sp, #4]
 8000c1e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000c20:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c22:	4d2d      	ldr	r5, [pc, #180]	; (8000cd8 <HAL_RCC_OscConfig+0x298>)
 8000c24:	682b      	ldr	r3, [r5, #0]
 8000c26:	05d9      	lsls	r1, r3, #23
 8000c28:	d51b      	bpl.n	8000c62 <HAL_RCC_OscConfig+0x222>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c2a:	68a3      	ldr	r3, [r4, #8]
 8000c2c:	4d27      	ldr	r5, [pc, #156]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d127      	bne.n	8000c82 <HAL_RCC_OscConfig+0x242>
 8000c32:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000c3a:	f7ff fcb5 	bl	80005a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c3e:	4d23      	ldr	r5, [pc, #140]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8000c40:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c42:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c46:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000c48:	079b      	lsls	r3, r3, #30
 8000c4a:	d539      	bpl.n	8000cc0 <HAL_RCC_OscConfig+0x280>
    if(pwrclkchanged == SET)
 8000c4c:	2e00      	cmp	r6, #0
 8000c4e:	f43f af08 	beq.w	8000a62 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c52:	4a1e      	ldr	r2, [pc, #120]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
 8000c54:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000c56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c5c:	e701      	b.n	8000a62 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000c5e:	2600      	movs	r6, #0
 8000c60:	e7df      	b.n	8000c22 <HAL_RCC_OscConfig+0x1e2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c62:	682b      	ldr	r3, [r5, #0]
 8000c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c68:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000c6a:	f7ff fc9d 	bl	80005a8 <HAL_GetTick>
 8000c6e:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c70:	682b      	ldr	r3, [r5, #0]
 8000c72:	05da      	lsls	r2, r3, #23
 8000c74:	d4d9      	bmi.n	8000c2a <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c76:	f7ff fc97 	bl	80005a8 <HAL_GetTick>
 8000c7a:	1bc0      	subs	r0, r0, r7
 8000c7c:	2802      	cmp	r0, #2
 8000c7e:	d9f7      	bls.n	8000c70 <HAL_RCC_OscConfig+0x230>
 8000c80:	e72b      	b.n	8000ada <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c82:	2b05      	cmp	r3, #5
 8000c84:	d104      	bne.n	8000c90 <HAL_RCC_OscConfig+0x250>
 8000c86:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000c88:	f043 0304 	orr.w	r3, r3, #4
 8000c8c:	672b      	str	r3, [r5, #112]	; 0x70
 8000c8e:	e7d0      	b.n	8000c32 <HAL_RCC_OscConfig+0x1f2>
 8000c90:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000c92:	f022 0201 	bic.w	r2, r2, #1
 8000c96:	672a      	str	r2, [r5, #112]	; 0x70
 8000c98:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000c9a:	f022 0204 	bic.w	r2, r2, #4
 8000c9e:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d1ca      	bne.n	8000c3a <HAL_RCC_OscConfig+0x1fa>
      tickstart = HAL_GetTick();
 8000ca4:	f7ff fc80 	bl	80005a8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ca8:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000cac:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000cae:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000cb0:	0798      	lsls	r0, r3, #30
 8000cb2:	d5cb      	bpl.n	8000c4c <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cb4:	f7ff fc78 	bl	80005a8 <HAL_GetTick>
 8000cb8:	1bc0      	subs	r0, r0, r7
 8000cba:	4540      	cmp	r0, r8
 8000cbc:	d9f7      	bls.n	8000cae <HAL_RCC_OscConfig+0x26e>
 8000cbe:	e70c      	b.n	8000ada <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cc0:	f7ff fc72 	bl	80005a8 <HAL_GetTick>
 8000cc4:	1bc0      	subs	r0, r0, r7
 8000cc6:	4540      	cmp	r0, r8
 8000cc8:	d9bd      	bls.n	8000c46 <HAL_RCC_OscConfig+0x206>
 8000cca:	e706      	b.n	8000ada <HAL_RCC_OscConfig+0x9a>
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	42470000 	.word	0x42470000
 8000cd4:	42470e80 	.word	0x42470e80
 8000cd8:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000cdc:	4d23      	ldr	r5, [pc, #140]	; (8000d6c <HAL_RCC_OscConfig+0x32c>)
 8000cde:	68ab      	ldr	r3, [r5, #8]
 8000ce0:	f003 030c 	and.w	r3, r3, #12
 8000ce4:	2b08      	cmp	r3, #8
 8000ce6:	f43f aee0 	beq.w	8000aaa <HAL_RCC_OscConfig+0x6a>
 8000cea:	4e21      	ldr	r6, [pc, #132]	; (8000d70 <HAL_RCC_OscConfig+0x330>)
 8000cec:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000cee:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000cf0:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000cf2:	d12d      	bne.n	8000d50 <HAL_RCC_OscConfig+0x310>
        tickstart = HAL_GetTick();
 8000cf4:	f7ff fc58 	bl	80005a8 <HAL_GetTick>
 8000cf8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000cfa:	682b      	ldr	r3, [r5, #0]
 8000cfc:	0199      	lsls	r1, r3, #6
 8000cfe:	d421      	bmi.n	8000d44 <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d00:	6a22      	ldr	r2, [r4, #32]
 8000d02:	69e3      	ldr	r3, [r4, #28]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000d08:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000d0c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000d0e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000d12:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000d14:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8000d18:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d1a:	4c14      	ldr	r4, [pc, #80]	; (8000d6c <HAL_RCC_OscConfig+0x32c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d1c:	0852      	lsrs	r2, r2, #1
 8000d1e:	3a01      	subs	r2, #1
 8000d20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d24:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000d26:	2301      	movs	r3, #1
 8000d28:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000d2a:	f7ff fc3d 	bl	80005a8 <HAL_GetTick>
 8000d2e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d30:	6823      	ldr	r3, [r4, #0]
 8000d32:	019a      	lsls	r2, r3, #6
 8000d34:	f53f ae99 	bmi.w	8000a6a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d38:	f7ff fc36 	bl	80005a8 <HAL_GetTick>
 8000d3c:	1b40      	subs	r0, r0, r5
 8000d3e:	2802      	cmp	r0, #2
 8000d40:	d9f6      	bls.n	8000d30 <HAL_RCC_OscConfig+0x2f0>
 8000d42:	e6ca      	b.n	8000ada <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d44:	f7ff fc30 	bl	80005a8 <HAL_GetTick>
 8000d48:	1bc0      	subs	r0, r0, r7
 8000d4a:	2802      	cmp	r0, #2
 8000d4c:	d9d5      	bls.n	8000cfa <HAL_RCC_OscConfig+0x2ba>
 8000d4e:	e6c4      	b.n	8000ada <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 8000d50:	f7ff fc2a 	bl	80005a8 <HAL_GetTick>
 8000d54:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d56:	682b      	ldr	r3, [r5, #0]
 8000d58:	019b      	lsls	r3, r3, #6
 8000d5a:	f57f ae86 	bpl.w	8000a6a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d5e:	f7ff fc23 	bl	80005a8 <HAL_GetTick>
 8000d62:	1b00      	subs	r0, r0, r4
 8000d64:	2802      	cmp	r0, #2
 8000d66:	d9f6      	bls.n	8000d56 <HAL_RCC_OscConfig+0x316>
 8000d68:	e6b7      	b.n	8000ada <HAL_RCC_OscConfig+0x9a>
 8000d6a:	bf00      	nop
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	42470060 	.word	0x42470060

08000d74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000d74:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000d76:	6803      	ldr	r3, [r0, #0]
 8000d78:	68c1      	ldr	r1, [r0, #12]
 8000d7a:	691a      	ldr	r2, [r3, #16]
{
 8000d7c:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000d7e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000d82:	430a      	orrs	r2, r1
 8000d84:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000d86:	6925      	ldr	r5, [r4, #16]
 8000d88:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 8000d8a:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000d8c:	69c0      	ldr	r0, [r0, #28]
 8000d8e:	432a      	orrs	r2, r5
 8000d90:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8000d92:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000d96:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8000d98:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000d9c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8000d9e:	430a      	orrs	r2, r1
 8000da0:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000da2:	695a      	ldr	r2, [r3, #20]
 8000da4:	69a1      	ldr	r1, [r4, #24]
 8000da6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000daa:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000dac:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000db0:	615a      	str	r2, [r3, #20]
 8000db2:	4a25      	ldr	r2, [pc, #148]	; (8000e48 <UART_SetConfig+0xd4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000db4:	d129      	bne.n	8000e0a <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d003      	beq.n	8000dc2 <UART_SetConfig+0x4e>
 8000dba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d120      	bne.n	8000e04 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8000dc2:	f7ff fde5 	bl	8000990 <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8000dc6:	6862      	ldr	r2, [r4, #4]
 8000dc8:	6825      	ldr	r5, [r4, #0]
 8000dca:	1892      	adds	r2, r2, r2
 8000dcc:	f04f 0300 	mov.w	r3, #0
 8000dd0:	f04f 0119 	mov.w	r1, #25
 8000dd4:	415b      	adcs	r3, r3
 8000dd6:	fba0 0101 	umull	r0, r1, r0, r1
 8000dda:	f7ff fa13 	bl	8000204 <__aeabi_uldivmod>
 8000dde:	2164      	movs	r1, #100	; 0x64
 8000de0:	fbb0 f4f1 	udiv	r4, r0, r1
 8000de4:	fb01 0314 	mls	r3, r1, r4, r0
 8000de8:	00db      	lsls	r3, r3, #3
 8000dea:	3332      	adds	r3, #50	; 0x32
 8000dec:	fbb3 f3f1 	udiv	r3, r3, r1
 8000df0:	f003 0207 	and.w	r2, r3, #7
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8000dfa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8000dfe:	4413      	add	r3, r2
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000e00:	60ab      	str	r3, [r5, #8]
 8000e02:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8000e04:	f7ff fdb4 	bl	8000970 <HAL_RCC_GetPCLK1Freq>
 8000e08:	e7dd      	b.n	8000dc6 <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d002      	beq.n	8000e14 <UART_SetConfig+0xa0>
 8000e0e:	4a0f      	ldr	r2, [pc, #60]	; (8000e4c <UART_SetConfig+0xd8>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d116      	bne.n	8000e42 <UART_SetConfig+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
 8000e14:	f7ff fdbc 	bl	8000990 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000e18:	6863      	ldr	r3, [r4, #4]
 8000e1a:	6825      	ldr	r5, [r4, #0]
 8000e1c:	2119      	movs	r1, #25
 8000e1e:	009a      	lsls	r2, r3, #2
 8000e20:	fba0 0101 	umull	r0, r1, r0, r1
 8000e24:	0f9b      	lsrs	r3, r3, #30
 8000e26:	f7ff f9ed 	bl	8000204 <__aeabi_uldivmod>
 8000e2a:	2264      	movs	r2, #100	; 0x64
 8000e2c:	fbb0 f1f2 	udiv	r1, r0, r2
 8000e30:	fb02 0311 	mls	r3, r2, r1, r0
 8000e34:	011b      	lsls	r3, r3, #4
 8000e36:	3332      	adds	r3, #50	; 0x32
 8000e38:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e3c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8000e40:	e7de      	b.n	8000e00 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK1Freq();
 8000e42:	f7ff fd95 	bl	8000970 <HAL_RCC_GetPCLK1Freq>
 8000e46:	e7e7      	b.n	8000e18 <UART_SetConfig+0xa4>
 8000e48:	40011000 	.word	0x40011000
 8000e4c:	40011400 	.word	0x40011400

08000e50 <HAL_UART_Init>:
{
 8000e50:	b510      	push	{r4, lr}
  if (huart == NULL)
 8000e52:	4604      	mov	r4, r0
 8000e54:	b340      	cbz	r0, 8000ea8 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8000e56:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000e5a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000e5e:	b91b      	cbnz	r3, 8000e68 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000e60:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000e64:	f000 fa1c 	bl	80012a0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8000e68:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000e6a:	2324      	movs	r3, #36	; 0x24
 8000e6c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000e70:	68d3      	ldr	r3, [r2, #12]
 8000e72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000e76:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000e78:	4620      	mov	r0, r4
 8000e7a:	f7ff ff7b 	bl	8000d74 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000e7e:	6823      	ldr	r3, [r4, #0]
 8000e80:	691a      	ldr	r2, [r3, #16]
 8000e82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000e86:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000e88:	695a      	ldr	r2, [r3, #20]
 8000e8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000e8e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000e90:	68da      	ldr	r2, [r3, #12]
 8000e92:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000e96:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e98:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8000e9a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e9c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8000e9e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8000ea2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8000ea6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000ea8:	2001      	movs	r0, #1
}
 8000eaa:	bd10      	pop	{r4, pc}

08000eac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000eac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	2214      	movs	r2, #20
{
 8000eb2:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	eb0d 0002 	add.w	r0, sp, r2
 8000eb8:	2100      	movs	r1, #0
 8000eba:	f000 fa77 	bl	80013ac <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ebe:	2400      	movs	r4, #0
 8000ec0:	4b3a      	ldr	r3, [pc, #232]	; (8000fac <MX_GPIO_Init+0x100>)
 8000ec2:	9401      	str	r4, [sp, #4]
 8000ec4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D13_Pin|D12_Pin|D11_Pin, GPIO_PIN_RESET);
 8000ec6:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8000fbc <MX_GPIO_Init+0x110>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MTR_B_IA_Pin|MTR_B_IB_Pin, GPIO_PIN_RESET);
 8000eca:	4f39      	ldr	r7, [pc, #228]	; (8000fb0 <MX_GPIO_Init+0x104>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D10_Pin|MTR_A_IA_Pin|MTR_A_IB_Pin, GPIO_PIN_RESET);
 8000ecc:	4e39      	ldr	r6, [pc, #228]	; (8000fb4 <MX_GPIO_Init+0x108>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ece:	f042 0204 	orr.w	r2, r2, #4
 8000ed2:	631a      	str	r2, [r3, #48]	; 0x30
 8000ed4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ed6:	f002 0204 	and.w	r2, r2, #4
 8000eda:	9201      	str	r2, [sp, #4]
 8000edc:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ede:	9402      	str	r4, [sp, #8]
 8000ee0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ee2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ee6:	631a      	str	r2, [r3, #48]	; 0x30
 8000ee8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000eea:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000eee:	9202      	str	r2, [sp, #8]
 8000ef0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef2:	9403      	str	r4, [sp, #12]
 8000ef4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ef6:	f042 0201 	orr.w	r2, r2, #1
 8000efa:	631a      	str	r2, [r3, #48]	; 0x30
 8000efc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000efe:	f002 0201 	and.w	r2, r2, #1
 8000f02:	9203      	str	r2, [sp, #12]
 8000f04:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f06:	9404      	str	r4, [sp, #16]
 8000f08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f0a:	f042 0202 	orr.w	r2, r2, #2
 8000f0e:	631a      	str	r2, [r3, #48]	; 0x30
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0302 	and.w	r3, r3, #2
 8000f16:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, D13_Pin|D12_Pin|D11_Pin, GPIO_PIN_RESET);
 8000f18:	4622      	mov	r2, r4
 8000f1a:	4640      	mov	r0, r8
 8000f1c:	21e0      	movs	r1, #224	; 0xe0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1e:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, D13_Pin|D12_Pin|D11_Pin, GPIO_PIN_RESET);
 8000f20:	f7ff fc84 	bl	800082c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, MTR_B_IA_Pin|MTR_B_IB_Pin, GPIO_PIN_RESET);
 8000f24:	4622      	mov	r2, r4
 8000f26:	4638      	mov	r0, r7
 8000f28:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000f2c:	f7ff fc7e 	bl	800082c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, D10_Pin|MTR_A_IA_Pin|MTR_A_IB_Pin, GPIO_PIN_RESET);
 8000f30:	4622      	mov	r2, r4
 8000f32:	4630      	mov	r0, r6
 8000f34:	f44f 7150 	mov.w	r1, #832	; 0x340
 8000f38:	f7ff fc78 	bl	800082c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f40:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f42:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f44:	4b1c      	ldr	r3, [pc, #112]	; (8000fb8 <MX_GPIO_Init+0x10c>)
 8000f46:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f48:	4638      	mov	r0, r7

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = D13_Pin|D12_Pin|D11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4a:	2501      	movs	r5, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f4e:	f7ff fb8d 	bl	800066c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = D13_Pin|D12_Pin|D11_Pin;
 8000f52:	23e0      	movs	r3, #224	; 0xe0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f54:	a905      	add	r1, sp, #20
 8000f56:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = D13_Pin|D12_Pin|D11_Pin;
 8000f58:	9305      	str	r3, [sp, #20]

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MTR_B_IA_Pin|MTR_B_IB_Pin;
 8000f5a:	f44f 7940 	mov.w	r9, #768	; 0x300
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f5e:	f04f 0802 	mov.w	r8, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f62:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f68:	f7ff fb80 	bl	800066c <HAL_GPIO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f6c:	a905      	add	r1, sp, #20
 8000f6e:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = MTR_B_IA_Pin|MTR_B_IB_Pin;
 8000f70:	f8cd 9014 	str.w	r9, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f74:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f76:	f8cd 801c 	str.w	r8, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f7c:	f7ff fb76 	bl	800066c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D10_Pin;
 8000f80:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(D10_GPIO_Port, &GPIO_InitStruct);
 8000f82:	a905      	add	r1, sp, #20
 8000f84:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = D10_Pin;
 8000f86:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f88:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(D10_GPIO_Port, &GPIO_InitStruct);
 8000f8e:	f7ff fb6d 	bl	800066c <HAL_GPIO_Init>
  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MTR_A_IA_Pin|MTR_A_IB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f92:	a905      	add	r1, sp, #20
 8000f94:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = MTR_A_IA_Pin|MTR_A_IB_Pin;
 8000f96:	f8cd 9014 	str.w	r9, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9a:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f9c:	f8cd 801c 	str.w	r8, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa0:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa2:	f7ff fb63 	bl	800066c <HAL_GPIO_Init>

}
 8000fa6:	b00b      	add	sp, #44	; 0x2c
 8000fa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	40020800 	.word	0x40020800
 8000fb4:	40020400 	.word	0x40020400
 8000fb8:	10210000 	.word	0x10210000
 8000fbc:	40020000 	.word	0x40020000

08000fc0 <lv_fw_common_get_ustick>:

/**
 * @brief 時間取得
 * @return ustick
 */
uint64_t lv_fw_common_get_ustick(void) {
 8000fc0:	b538      	push	{r3, r4, r5, lr}
  uint32_t ms = HAL_GetTick();
 8000fc2:	f7ff faf1 	bl	80005a8 <HAL_GetTick>
  uint32_t us =
      (uint32_t) (((uint64_t) (SysTick->LOAD - SysTick->VAL) * 1000 / (SysTick->LOAD + 1)));
 8000fc6:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <lv_fw_common_get_ustick+0x44>)
  uint32_t ms = HAL_GetTick();
 8000fc8:	4604      	mov	r4, r0
      (uint32_t) (((uint64_t) (SysTick->LOAD - SysTick->VAL) * 1000 / (SysTick->LOAD + 1)));
 8000fca:	6859      	ldr	r1, [r3, #4]
 8000fcc:	6898      	ldr	r0, [r3, #8]
 8000fce:	685a      	ldr	r2, [r3, #4]
 8000fd0:	1a09      	subs	r1, r1, r0
 8000fd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fd6:	3201      	adds	r2, #1
 8000fd8:	2300      	movs	r3, #0
 8000fda:	fba1 0100 	umull	r0, r1, r1, r0
 8000fde:	f7ff f911 	bl	8000204 <__aeabi_uldivmod>
  if (us < lasttick_us && ms == lasttick_ms) {
 8000fe2:	4b09      	ldr	r3, [pc, #36]	; (8001008 <lv_fw_common_get_ustick+0x48>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	4290      	cmp	r0, r2
 8000fe8:	4a08      	ldr	r2, [pc, #32]	; (800100c <lv_fw_common_get_ustick+0x4c>)
 8000fea:	d203      	bcs.n	8000ff4 <lv_fw_common_get_ustick+0x34>
 8000fec:	6815      	ldr	r5, [r2, #0]
 8000fee:	42ac      	cmp	r4, r5
    ms++;
 8000ff0:	bf08      	it	eq
 8000ff2:	3401      	addeq	r4, #1
  }
  lasttick_ms = ms;
  lasttick_us = us;
 8000ff4:	6018      	str	r0, [r3, #0]
  return (uint64_t) ms * 1000 + us;
 8000ff6:	2100      	movs	r1, #0
}
 8000ff8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  lasttick_ms = ms;
 8000ffc:	6014      	str	r4, [r2, #0]
}
 8000ffe:	fbe3 0104 	umlal	r0, r1, r3, r4
 8001002:	bd38      	pop	{r3, r4, r5, pc}
 8001004:	e000e010 	.word	0xe000e010
 8001008:	20000030 	.word	0x20000030
 800100c:	2000002c 	.word	0x2000002c

08001010 <lv_fw_common_sync_fps>:
/**
 * @brief fps同期
 * @param fps
 * @return
 */
LV_FW_COMMON_SYNC_RESULT lv_fw_common_sync_fps(uint32_t fps) {
 8001010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LV_FW_COMMON_SYNC_RESULT ret = LV_FW_COMMON_SYNC_PROC_OVERTIME;

  if (fps == 0) {
 8001014:	b1d8      	cbz	r0, 800104e <lv_fw_common_sync_fps+0x3e>
  }

  uint64_t waitus = 1000000 / fps;
  uint64_t now = lv_fw_common_get_ustick();

  while ((now - sync_starttime) < waitus) {
 8001016:	f8df 8040 	ldr.w	r8, [pc, #64]	; 8001058 <lv_fw_common_sync_fps+0x48>
  uint64_t waitus = 1000000 / fps;
 800101a:	4c0e      	ldr	r4, [pc, #56]	; (8001054 <lv_fw_common_sync_fps+0x44>)
 800101c:	fbb4 f4f0 	udiv	r4, r4, r0
 8001020:	2500      	movs	r5, #0
  uint64_t now = lv_fw_common_get_ustick();
 8001022:	f7ff ffcd 	bl	8000fc0 <lv_fw_common_get_ustick>
  LV_FW_COMMON_SYNC_RESULT ret = LV_FW_COMMON_SYNC_PROC_OVERTIME;
 8001026:	2301      	movs	r3, #1
  while ((now - sync_starttime) < waitus) {
 8001028:	e9d8 6700 	ldrd	r6, r7, [r8]
 800102c:	1b86      	subs	r6, r0, r6
 800102e:	eb61 0707 	sbc.w	r7, r1, r7
 8001032:	42af      	cmp	r7, r5
 8001034:	bf08      	it	eq
 8001036:	42a6      	cmpeq	r6, r4
 8001038:	d304      	bcc.n	8001044 <lv_fw_common_sync_fps+0x34>
    __NOP();
    ret = LV_FW_COMMON_SYNC_OK;
    now = lv_fw_common_get_ustick();
  }
  sync_starttime = now;
 800103a:	e9c8 0100 	strd	r0, r1, [r8]
  return ret;
}
 800103e:	4618      	mov	r0, r3
 8001040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __NOP();
 8001044:	bf00      	nop
    now = lv_fw_common_get_ustick();
 8001046:	f7ff ffbb 	bl	8000fc0 <lv_fw_common_get_ustick>
    ret = LV_FW_COMMON_SYNC_OK;
 800104a:	2300      	movs	r3, #0
 800104c:	e7ec      	b.n	8001028 <lv_fw_common_sync_fps+0x18>
    return LV_FW_COMMON_SYNC_INVALID_ARG;
 800104e:	2302      	movs	r3, #2
 8001050:	e7f5      	b.n	800103e <lv_fw_common_sync_fps+0x2e>
 8001052:	bf00      	nop
 8001054:	000f4240 	.word	0x000f4240
 8001058:	20000038 	.word	0x20000038

0800105c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800105c:	b530      	push	{r4, r5, lr}
 800105e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001060:	2234      	movs	r2, #52	; 0x34
 8001062:	2100      	movs	r1, #0
 8001064:	a807      	add	r0, sp, #28
 8001066:	f000 f9a1 	bl	80013ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800106a:	2100      	movs	r1, #0
 800106c:	2214      	movs	r2, #20
 800106e:	a802      	add	r0, sp, #8
 8001070:	f000 f99c 	bl	80013ac <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001074:	2500      	movs	r5, #0
 8001076:	4b1c      	ldr	r3, [pc, #112]	; (80010e8 <SystemClock_Config+0x8c>)
 8001078:	9500      	str	r5, [sp, #0]
 800107a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800107c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001080:	641a      	str	r2, [r3, #64]	; 0x40
 8001082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001084:	4a19      	ldr	r2, [pc, #100]	; (80010ec <SystemClock_Config+0x90>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800108e:	9501      	str	r5, [sp, #4]
 8001090:	6813      	ldr	r3, [r2, #0]
 8001092:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001096:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800109a:	6013      	str	r3, [r2, #0]
 800109c:	6813      	ldr	r3, [r2, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800109e:	950e      	str	r5, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80010a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010a8:	2301      	movs	r3, #1
 80010aa:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010ac:	2310      	movs	r3, #16
 80010ae:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80010b0:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010b2:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010b6:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010b8:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ba:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010bc:	2304      	movs	r3, #4
 80010be:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010c0:	9407      	str	r4, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c2:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010c4:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010c6:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c8:	f7ff fcba 	bl	8000a40 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010cc:	230f      	movs	r3, #15
 80010ce:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010d0:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010d6:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d8:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010da:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010dc:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010de:	9506      	str	r5, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010e0:	f7ff fbaa 	bl	8000838 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80010e4:	b015      	add	sp, #84	; 0x54
 80010e6:	bd30      	pop	{r4, r5, pc}
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40007000 	.word	0x40007000

080010f0 <main>:
{
 80010f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_Init();
 80010f4:	f7ff fa32 	bl	800055c <HAL_Init>
  SystemClock_Config();
 80010f8:	f7ff ffb0 	bl	800105c <SystemClock_Config>
  MX_GPIO_Init();
 80010fc:	f7ff fed6 	bl	8000eac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001100:	f000 f8b2 	bl	8001268 <MX_USART2_UART_Init>
  uint32_t fps_offset = 0;
 8001104:	2600      	movs	r6, #0
    if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET) {
 8001106:	4c39      	ldr	r4, [pc, #228]	; (80011ec <main+0xfc>)
        HAL_GPIO_WritePin(MTR_A_IA_GPIO_Port, MTR_A_IA_Pin, GPIO_PIN_SET);
 8001108:	4d39      	ldr	r5, [pc, #228]	; (80011f0 <main+0x100>)
  uint32_t counter = 0;
 800110a:	46b0      	mov	r8, r6
    if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET) {
 800110c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001110:	4620      	mov	r0, r4
 8001112:	f7ff fb85 	bl	8000820 <HAL_GPIO_ReadPin>
 8001116:	b9c0      	cbnz	r0, 800114a <main+0x5a>
      lv_fw_common_sync_fps(MIN_FPS);
 8001118:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    uint16_t phase = counter % PULSE_CNT;
 800111c:	f44f 7616 	mov.w	r6, #600	; 0x258
      lv_fw_common_sync_fps(MIN_FPS + fps_offset);
 8001120:	f7ff ff76 	bl	8001010 <lv_fw_common_sync_fps>
    uint16_t phase = counter % PULSE_CNT;
 8001124:	fbb8 f3f6 	udiv	r3, r8, r6
 8001128:	fb06 8613 	mls	r6, r6, r3, r8
    switch ((up_down * 4) + (phase & 0x03)) {
 800112c:	f003 0201 	and.w	r2, r3, #1
 8001130:	f006 0303 	and.w	r3, r6, #3
 8001134:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001138:	3b01      	subs	r3, #1
    uint16_t phase = counter % PULSE_CNT;
 800113a:	b2b7      	uxth	r7, r6
    switch ((up_down * 4) + (phase & 0x03)) {
 800113c:	2b05      	cmp	r3, #5
 800113e:	d807      	bhi.n	8001150 <main+0x60>
 8001140:	e8df f003 	tbb	[pc, r3]
 8001144:	4b4b372f 	.word	0x4b4b372f
 8001148:	2f37      	.short	0x2f37
      lv_fw_common_sync_fps(MIN_FPS + fps_offset);
 800114a:	f506 707a 	add.w	r0, r6, #1000	; 0x3e8
 800114e:	e7e5      	b.n	800111c <main+0x2c>
        HAL_GPIO_WritePin(MTR_A_IA_GPIO_Port, MTR_A_IA_Pin, GPIO_PIN_SET);
 8001150:	2201      	movs	r2, #1
 8001152:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001156:	4628      	mov	r0, r5
 8001158:	f7ff fb68 	bl	800082c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MTR_A_IB_GPIO_Port, MTR_A_IB_Pin, GPIO_PIN_RESET);
 800115c:	2200      	movs	r2, #0
        HAL_GPIO_WritePin(MTR_A_IB_GPIO_Port, MTR_A_IB_Pin, GPIO_PIN_SET);
 800115e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001162:	4628      	mov	r0, r5
 8001164:	f7ff fb62 	bl	800082c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MTR_B_IA_GPIO_Port, MTR_B_IA_Pin, GPIO_PIN_SET);
 8001168:	2201      	movs	r2, #1
 800116a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800116e:	4620      	mov	r0, r4
 8001170:	f7ff fb5c 	bl	800082c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MTR_B_IB_GPIO_Port, MTR_B_IB_Pin, GPIO_PIN_RESET);
 8001174:	2200      	movs	r2, #0
        HAL_GPIO_WritePin(MTR_B_IB_GPIO_Port, MTR_B_IB_Pin, GPIO_PIN_SET);
 8001176:	f44f 7100 	mov.w	r1, #512	; 0x200
 800117a:	4620      	mov	r0, r4
 800117c:	f7ff fb56 	bl	800082c <HAL_GPIO_WritePin>
    if(phase >= PULSE_CNT/2) {
 8001180:	f5b6 7f96 	cmp.w	r6, #300	; 0x12c
      phase = PULSE_CNT - phase - 1;    // 残パルス数
 8001184:	bf22      	ittt	cs
 8001186:	f5c7 7615 	rsbcs	r6, r7, #596	; 0x254
 800118a:	3603      	addcs	r6, #3
 800118c:	b2b7      	uxthcs	r7, r6
    fps_offset = ((phase * DELTA_FPS) < MAX_FPS_OFFSET) ? (phase * DELTA_FPS) : MAX_FPS_OFFSET;
 800118e:	2614      	movs	r6, #20
 8001190:	437e      	muls	r6, r7
 8001192:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
 8001196:	bfa8      	it	ge
 8001198:	f44f 767a 	movge.w	r6, #1000	; 0x3e8
    counter ++;
 800119c:	f108 0801 	add.w	r8, r8, #1
  {
 80011a0:	e7b4      	b.n	800110c <main+0x1c>
        HAL_GPIO_WritePin(MTR_A_IA_GPIO_Port, MTR_A_IA_Pin, GPIO_PIN_RESET);
 80011a2:	2200      	movs	r2, #0
 80011a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011a8:	4628      	mov	r0, r5
 80011aa:	f7ff fb3f 	bl	800082c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MTR_A_IB_GPIO_Port, MTR_A_IB_Pin, GPIO_PIN_SET);
 80011ae:	2201      	movs	r2, #1
 80011b0:	e7d5      	b.n	800115e <main+0x6e>
        HAL_GPIO_WritePin(MTR_A_IA_GPIO_Port, MTR_A_IA_Pin, GPIO_PIN_RESET);
 80011b2:	2200      	movs	r2, #0
 80011b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011b8:	4628      	mov	r0, r5
 80011ba:	f7ff fb37 	bl	800082c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MTR_A_IB_GPIO_Port, MTR_A_IB_Pin, GPIO_PIN_SET);
 80011be:	2201      	movs	r2, #1
        HAL_GPIO_WritePin(MTR_A_IB_GPIO_Port, MTR_A_IB_Pin, GPIO_PIN_RESET);
 80011c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011c4:	4628      	mov	r0, r5
 80011c6:	f7ff fb31 	bl	800082c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MTR_B_IA_GPIO_Port, MTR_B_IA_Pin, GPIO_PIN_RESET);
 80011ca:	2200      	movs	r2, #0
 80011cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011d0:	4620      	mov	r0, r4
 80011d2:	f7ff fb2b 	bl	800082c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MTR_B_IB_GPIO_Port, MTR_B_IB_Pin, GPIO_PIN_SET);
 80011d6:	2201      	movs	r2, #1
 80011d8:	e7cd      	b.n	8001176 <main+0x86>
        HAL_GPIO_WritePin(MTR_A_IA_GPIO_Port, MTR_A_IA_Pin, GPIO_PIN_SET);
 80011da:	2201      	movs	r2, #1
 80011dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011e0:	4628      	mov	r0, r5
 80011e2:	f7ff fb23 	bl	800082c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MTR_A_IB_GPIO_Port, MTR_A_IB_Pin, GPIO_PIN_RESET);
 80011e6:	2200      	movs	r2, #0
 80011e8:	e7ea      	b.n	80011c0 <main+0xd0>
 80011ea:	bf00      	nop
 80011ec:	40020800 	.word	0x40020800
 80011f0:	40020400 	.word	0x40020400

080011f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f4:	4770      	bx	lr
	...

080011f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f8:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fa:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <HAL_MspInit+0x3c>)
 80011fc:	2100      	movs	r1, #0
 80011fe:	9100      	str	r1, [sp, #0]
 8001200:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001202:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001206:	645a      	str	r2, [r3, #68]	; 0x44
 8001208:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800120a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800120e:	9200      	str	r2, [sp, #0]
 8001210:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001212:	9101      	str	r1, [sp, #4]
 8001214:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001216:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800121a:	641a      	str	r2, [r3, #64]	; 0x40
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001222:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001224:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 8001226:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001228:	f7ff f9c4 	bl	80005b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800122c:	b003      	add	sp, #12
 800122e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001232:	bf00      	nop
 8001234:	40023800 	.word	0x40023800

08001238 <NMI_Handler>:
 8001238:	4770      	bx	lr

0800123a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800123a:	e7fe      	b.n	800123a <HardFault_Handler>

0800123c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800123c:	e7fe      	b.n	800123c <MemManage_Handler>

0800123e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800123e:	e7fe      	b.n	800123e <BusFault_Handler>

08001240 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001240:	e7fe      	b.n	8001240 <UsageFault_Handler>

08001242 <SVC_Handler>:
 8001242:	4770      	bx	lr

08001244 <DebugMon_Handler>:
 8001244:	4770      	bx	lr

08001246 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001246:	4770      	bx	lr

08001248 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001248:	f7ff b9a2 	b.w	8000590 <HAL_IncTick>

0800124c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <SystemInit+0x18>)
 800124e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001252:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001256:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800125a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001268:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 800126a:	480b      	ldr	r0, [pc, #44]	; (8001298 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 800126c:	4b0b      	ldr	r3, [pc, #44]	; (800129c <MX_USART2_UART_Init+0x34>)
 800126e:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8001272:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001276:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001278:	2300      	movs	r3, #0
 800127a:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800127c:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800127e:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001280:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001282:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001284:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001286:	f7ff fde3 	bl	8000e50 <HAL_UART_Init>
 800128a:	b118      	cbz	r0, 8001294 <MX_USART2_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 800128c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001290:	f7ff bfb0 	b.w	80011f4 <Error_Handler>
 8001294:	bd08      	pop	{r3, pc}
 8001296:	bf00      	nop
 8001298:	20000044 	.word	0x20000044
 800129c:	40004400 	.word	0x40004400

080012a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012a0:	b510      	push	{r4, lr}
 80012a2:	4604      	mov	r4, r0
 80012a4:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a6:	2214      	movs	r2, #20
 80012a8:	2100      	movs	r1, #0
 80012aa:	a803      	add	r0, sp, #12
 80012ac:	f000 f87e 	bl	80013ac <memset>
  if(uartHandle->Instance==USART2)
 80012b0:	6822      	ldr	r2, [r4, #0]
 80012b2:	4b15      	ldr	r3, [pc, #84]	; (8001308 <HAL_UART_MspInit+0x68>)
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d124      	bne.n	8001302 <HAL_UART_MspInit+0x62>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012b8:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80012bc:	2100      	movs	r1, #0
 80012be:	9101      	str	r1, [sp, #4]
 80012c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c2:	4812      	ldr	r0, [pc, #72]	; (800130c <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80012c4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80012c8:	641a      	str	r2, [r3, #64]	; 0x40
 80012ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012cc:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80012d0:	9201      	str	r2, [sp, #4]
 80012d2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d4:	9102      	str	r1, [sp, #8]
 80012d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012d8:	f042 0201 	orr.w	r2, r2, #1
 80012dc:	631a      	str	r2, [r3, #48]	; 0x30
 80012de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	9302      	str	r3, [sp, #8]
 80012e6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012e8:	230c      	movs	r3, #12
 80012ea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ec:	2302      	movs	r3, #2
 80012ee:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012f0:	2301      	movs	r3, #1
 80012f2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f4:	2303      	movs	r3, #3
 80012f6:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012fa:	2307      	movs	r3, #7
 80012fc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fe:	f7ff f9b5 	bl	800066c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001302:	b008      	add	sp, #32
 8001304:	bd10      	pop	{r4, pc}
 8001306:	bf00      	nop
 8001308:	40004400 	.word	0x40004400
 800130c:	40020000 	.word	0x40020000

08001310 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001310:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001348 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001314:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001316:	e003      	b.n	8001320 <LoopCopyDataInit>

08001318 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001318:	4b0c      	ldr	r3, [pc, #48]	; (800134c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800131a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800131c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800131e:	3104      	adds	r1, #4

08001320 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001320:	480b      	ldr	r0, [pc, #44]	; (8001350 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001322:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001324:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001326:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001328:	d3f6      	bcc.n	8001318 <CopyDataInit>
  ldr  r2, =_sbss
 800132a:	4a0b      	ldr	r2, [pc, #44]	; (8001358 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800132c:	e002      	b.n	8001334 <LoopFillZerobss>

0800132e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800132e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001330:	f842 3b04 	str.w	r3, [r2], #4

08001334 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001334:	4b09      	ldr	r3, [pc, #36]	; (800135c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001336:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001338:	d3f9      	bcc.n	800132e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800133a:	f7ff ff87 	bl	800124c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800133e:	f000 f811 	bl	8001364 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001342:	f7ff fed5 	bl	80010f0 <main>
  bx  lr    
 8001346:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001348:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800134c:	080013fc 	.word	0x080013fc
  ldr  r0, =_sdata
 8001350:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001354:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001358:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 800135c:	20000084 	.word	0x20000084

08001360 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001360:	e7fe      	b.n	8001360 <ADC_IRQHandler>
	...

08001364 <__libc_init_array>:
 8001364:	b570      	push	{r4, r5, r6, lr}
 8001366:	4e0d      	ldr	r6, [pc, #52]	; (800139c <__libc_init_array+0x38>)
 8001368:	4c0d      	ldr	r4, [pc, #52]	; (80013a0 <__libc_init_array+0x3c>)
 800136a:	1ba4      	subs	r4, r4, r6
 800136c:	10a4      	asrs	r4, r4, #2
 800136e:	2500      	movs	r5, #0
 8001370:	42a5      	cmp	r5, r4
 8001372:	d109      	bne.n	8001388 <__libc_init_array+0x24>
 8001374:	4e0b      	ldr	r6, [pc, #44]	; (80013a4 <__libc_init_array+0x40>)
 8001376:	4c0c      	ldr	r4, [pc, #48]	; (80013a8 <__libc_init_array+0x44>)
 8001378:	f000 f820 	bl	80013bc <_init>
 800137c:	1ba4      	subs	r4, r4, r6
 800137e:	10a4      	asrs	r4, r4, #2
 8001380:	2500      	movs	r5, #0
 8001382:	42a5      	cmp	r5, r4
 8001384:	d105      	bne.n	8001392 <__libc_init_array+0x2e>
 8001386:	bd70      	pop	{r4, r5, r6, pc}
 8001388:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800138c:	4798      	blx	r3
 800138e:	3501      	adds	r5, #1
 8001390:	e7ee      	b.n	8001370 <__libc_init_array+0xc>
 8001392:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001396:	4798      	blx	r3
 8001398:	3501      	adds	r5, #1
 800139a:	e7f2      	b.n	8001382 <__libc_init_array+0x1e>
 800139c:	080013f4 	.word	0x080013f4
 80013a0:	080013f4 	.word	0x080013f4
 80013a4:	080013f4 	.word	0x080013f4
 80013a8:	080013f8 	.word	0x080013f8

080013ac <memset>:
 80013ac:	4402      	add	r2, r0
 80013ae:	4603      	mov	r3, r0
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d100      	bne.n	80013b6 <memset+0xa>
 80013b4:	4770      	bx	lr
 80013b6:	f803 1b01 	strb.w	r1, [r3], #1
 80013ba:	e7f9      	b.n	80013b0 <memset+0x4>

080013bc <_init>:
 80013bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013be:	bf00      	nop
 80013c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013c2:	bc08      	pop	{r3}
 80013c4:	469e      	mov	lr, r3
 80013c6:	4770      	bx	lr

080013c8 <_fini>:
 80013c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ca:	bf00      	nop
 80013cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013ce:	bc08      	pop	{r3}
 80013d0:	469e      	mov	lr, r3
 80013d2:	4770      	bx	lr
